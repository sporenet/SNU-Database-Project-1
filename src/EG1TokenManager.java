/* Generated By:JavaCC: Do not edit this line. EG1TokenManager.java */
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Vector;
import java.util.StringTokenizer;
import java.util.HashMap;
import java.util.Iterator;
import java.io.File;
import java.io.UnsupportedEncodingException;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

/** Token Manager. */
public class EG1TokenManager implements EG1Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 25;
         if ((active0 & 0x7fffffc00000L) != 0L)
         {
            jjmatchedKind = 19;
            return 24;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 4;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x8800000000L) != 0L)
            return 24;
         if ((active0 & 0x7f77ffc00000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 24;
         }
         return -1;
      case 2:
         if ((active0 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x14011000000L) != 0L)
            return 24;
         if ((active0 & 0x7837eec00000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 2;
            }
            return 24;
         }
         return -1;
      case 3:
         if ((active0 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x201260400000L) != 0L)
            return 24;
         if ((active0 & 0x58258e800000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
            return 24;
         }
         return -1;
      case 4:
         if ((active0 & 0x58040e800000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
            return 24;
         }
         if ((active0 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 24;
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100400000000L) != 0L)
            return 24;
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x48000e800000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
            return 24;
         }
         return -1;
      case 6:
         if ((active0 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xe000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
            return 24;
         }
         if ((active0 & 0x480000800000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
            return 24;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x480000800000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 8;
            return 24;
         }
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x480000800000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 24;
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x480000800000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x480000800000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 5);
      case 10:
         return jjStopAtPos(0, 6);
      case 13:
         return jjStopAtPos(0, 7);
      case 32:
         return jjStopAtPos(0, 4);
      case 39:
         return jjStartNfaWithStates_0(0, 17, 25);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 42:
         return jjStopAtPos(0, 3);
      case 44:
         return jjStopAtPos(0, 12);
      case 46:
         return jjStopAtPos(0, 13);
      case 59:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x6L);
      case 95:
         return jjStopAtPos(0, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4800000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20800000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4002c0000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1004000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe0010000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x210001000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x500000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 13:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100040000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400608000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2120000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x84010000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10005000000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x1082800000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 24);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x700400000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1180000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 24);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x41000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 99:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 24);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x48040c000000L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 24);
         break;
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 24);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 24);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80008000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000800000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400008800000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 24);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 24);
         return jjMoveStringLiteralDfa6_0(active0, 0xc0180000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x4c0000800000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000000L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 24);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x180000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         return jjMoveStringLiteralDfa10_0(active0, 0x106000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 24);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(10, 42);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 109:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(10, 46);
         break;
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(10, 43);
         break;
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(10, 32);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(11, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0xf7ffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 39)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  break;
               case 0:
                  if ((0xf400ff7a00000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(12);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(2);
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  if (curChar == 60)
                     jjCheckNAdd(2);
                  else if (curChar == 62)
                     jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x7000000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 62)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 6:
                  if ((0xf400ff7a00000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 7:
                  if ((0x100002600L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xf7ffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 50)
                     kind = 50;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 22:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 9:
                  if ((0x57ffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(24);
                  }
                  else if ((0x50000001e8000001L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  break;
               case 6:
                  if ((0x50000001e8000001L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\73\15", "\73\12", "\52", null, null, null, null, "\73", "\137", "\50", 
"\51", "\54", "\56", null, null, null, "\47", null, null, "\40", null, 
"\145\170\151\164", "\143\162\145\141\164\145\40\164\141\142\154\145", 
"\156\157\164\40\156\165\154\154", "\160\162\151\155\141\162\171\40\153\145\171", 
"\146\157\162\145\151\147\156\40\153\145\171", "\162\145\146\145\162\145\156\143\145\163", "\151\156\164", 
"\143\150\141\162", "\144\141\164\145", "\144\162\157\160\40\164\141\142\154\145", 
"\163\150\157\167\40\164\141\142\154\145\163", "\144\145\163\143", "\163\145\154\145\143\164", "\141\163", 
"\146\162\157\155", "\167\150\145\162\145", "\141\156\144", "\157\162", "\156\157\164", 
"\151\163\40\156\165\154\154", "\151\163\40\156\157\164\40\156\165\154\154", 
"\151\156\163\145\162\164\40\151\156\164\157", "\166\141\154\165\145\163", "\156\165\154\154", 
"\144\145\154\145\164\145\40\146\162\157\155", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffff0fL, 
};
static final long[] jjtoSkip = {
   0xf0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[25];
private final int[] jjstateSet = new int[50];
protected char curChar;
/** Constructor. */
public EG1TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public EG1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
